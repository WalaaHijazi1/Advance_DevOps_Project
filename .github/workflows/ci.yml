name: CI Workflow

on:
  push:
    branches:
      - main  # Trigger the workflow when changes are pushed to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the main branch

jobs:
  setup:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2  # Checks out the code from your GitHub repository

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Specify Python version

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install dependencies from your requirements.txt

  run_backend:
    runs-on: ubuntu-latest
    needs: setup  # Run this job after the setup job
    steps:
      - name: Run backend application (rest_app.py)
        run: |
          python3 rest_app.py > rest_app.log 2>&1 &  # Run rest_app.py in the background
          
          # Wait for the backend to be available (check every 2 seconds for up to 30 seconds)
          counter=0
          while ! curl -s 127.0.0.1:5000 > /dev/null && [ $counter -lt 15 ]; do
            echo "Waiting for backend to be available..."
            sleep 2
            counter=$((counter + 1))
          done
          
          # Fail the pipeline if the backend did not start
          if [ $counter -eq 15 ]; then
            echo "Backend did not start in time."
            exit 1
          fi
          echo "Backend is up and running."

  run_frontend:
    runs-on: ubuntu-latest
    needs: setup  # Run this job after the setup job
    steps:
      - name: Run frontend application (web_app.py)
        run: |
          python3 web_app.py > web_app.log 2>&1 &  # Run web_app.py in the background

          # Wait for the frontend to be available (check every 2 seconds for up to 30 seconds)
          counter=0
          while ! curl -s 127.0.0.1:5001 > /dev/null && [ $counter -lt 15 ]; do
            echo "Waiting for frontend to be available..."
            sleep 2
            counter=$((counter + 1))
          done

          # Fail the pipeline if the frontend did not start
          if [ $counter -eq 15 ]; then
            echo "Frontend did not start in time."
            exit 1
          fi
          echo "Frontend is up and running."

  run_backend_testing:
    runs-on: ubuntu-latest
    needs: run_backend  # Ensure the backend is running before running backend tests
    steps:
      - name: Run backend tests (backend_testing.py)
        run: |
          python3 backend_testing.py  # Run the backend testing script

  run_frontend_testing:
    runs-on: ubuntu-latest
    needs: run_frontend  # Ensure the frontend is running before running frontend tests
    steps:
      - name: Run frontend tests (frontend_testing.py)
        run: |
          python3 frontend_testing.py  # Run the frontend testing script

  run_combined_testing:
    runs-on: ubuntu-latest
    needs: [run_backend_testing, run_frontend_testing]  # Run combined tests after both backend and frontend tests
    steps:
      - name: Run combined tests (combined_testing.py)
        run: |
          python3 combined_testing.py  # Run the combined testing script

  clean_environment:
    runs-on: ubuntu-latest
    needs: run_combined_testing  # Run after combined tests
    steps:
      - name: Clean environment (clean_environment.py)
        run: |
          python3 clean_environment.py  # Clean up the environment by stopping the servers

